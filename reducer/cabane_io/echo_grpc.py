# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: echo.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import echo_pb2


class EchoBase(abc.ABC):

    @abc.abstractmethod
    async def Ask(self, stream: 'grpclib.server.Stream[echo_pb2.EchoQuery, echo_pb2.EchoResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/cabane.io.Echo/Ask': grpclib.const.Handler(
                self.Ask,
                grpclib.const.Cardinality.UNARY_UNARY,
                echo_pb2.EchoQuery,
                echo_pb2.EchoResponse,
            ),
        }


class EchoStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Ask = grpclib.client.UnaryUnaryMethod(
            channel,
            '/cabane.io.Echo/Ask',
            echo_pb2.EchoQuery,
            echo_pb2.EchoResponse,
        )
