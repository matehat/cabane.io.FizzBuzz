# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: echo.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='echo.proto',
  package='cabane.io',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\necho.proto\x12\tcabane.io\"\x1b\n\tEchoQuery\x12\x0e\n\x06number\x18\x01 \x01(\x03\"\x1f\n\x0c\x45\x63hoResponse\x12\x0f\n\x07message\x18\x01 \x01(\t2<\n\x04\x45\x63ho\x12\x34\n\x03\x41sk\x12\x14.cabane.io.EchoQuery\x1a\x17.cabane.io.EchoResponseb\x06proto3')
)




_ECHOQUERY = _descriptor.Descriptor(
  name='EchoQuery',
  full_name='cabane.io.EchoQuery',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='number', full_name='cabane.io.EchoQuery.number', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=25,
  serialized_end=52,
)


_ECHORESPONSE = _descriptor.Descriptor(
  name='EchoResponse',
  full_name='cabane.io.EchoResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='cabane.io.EchoResponse.message', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=54,
  serialized_end=85,
)

DESCRIPTOR.message_types_by_name['EchoQuery'] = _ECHOQUERY
DESCRIPTOR.message_types_by_name['EchoResponse'] = _ECHORESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

EchoQuery = _reflection.GeneratedProtocolMessageType('EchoQuery', (_message.Message,), dict(
  DESCRIPTOR = _ECHOQUERY,
  __module__ = 'echo_pb2'
  # @@protoc_insertion_point(class_scope:cabane.io.EchoQuery)
  ))
_sym_db.RegisterMessage(EchoQuery)

EchoResponse = _reflection.GeneratedProtocolMessageType('EchoResponse', (_message.Message,), dict(
  DESCRIPTOR = _ECHORESPONSE,
  __module__ = 'echo_pb2'
  # @@protoc_insertion_point(class_scope:cabane.io.EchoResponse)
  ))
_sym_db.RegisterMessage(EchoResponse)



_ECHO = _descriptor.ServiceDescriptor(
  name='Echo',
  full_name='cabane.io.Echo',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=87,
  serialized_end=147,
  methods=[
  _descriptor.MethodDescriptor(
    name='Ask',
    full_name='cabane.io.Echo.Ask',
    index=0,
    containing_service=None,
    input_type=_ECHOQUERY,
    output_type=_ECHORESPONSE,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_ECHO)

DESCRIPTOR.services_by_name['Echo'] = _ECHO

# @@protoc_insertion_point(module_scope)
